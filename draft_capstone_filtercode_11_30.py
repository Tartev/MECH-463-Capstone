# -*- coding: utf-8 -*-
"""Draft_capstone_filtercode-11/30.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pMessTVQiRcakAaejQNTqK50DbIFu5Gm
"""

!pip install pytesseract

import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import scipy
import math
from scipy.signal import butter
from scipy import signal
from scipy.fft import fft, fftfreq
#$ pip install --upgrade imutils
import cv2
import pytesseract

from google.colab import drive
drive.mount('/content/drive')

# compare
data_array = np.genfromtxt('testdata2.csv', delimiter=',', skip_header=2)
# convert timestamps to seconds
#data_array[:,0] = (data_array[:,0])/1000


t = data_array[:,2]
ang_vel_z = data_array[:,5]

n_i = 3000
n_f = 3400

freq = 1/(t[1]-t[0])

t_new = t[n_i:n_f]
ang_vel_z_window = ang_vel_z[n_i:n_f]

b, a = signal.bessel(2, 8, analog=False,fs = freq) #second order BW filter with 10% cutoff of sampling frequency 

ang_vel_z_filt_BW = signal.filtfilt(b, a, ang_vel_z_window, padlen=1)

ang_vel_z_filt_lfilter = signal.lfilter(b, a, ang_vel_z_window)


#fig1 = plt.figure()

plt.plot(t_new, ang_vel_z_window,'b')

plt.plot(t_new, ang_vel_z_filt_BW,'g', label = 'Butterworth + forward-backward (filtfilt)')

plt.plot(t_new, ang_vel_z_filt_lfilter,'r', label = 'FIR Butterworth (lfilter) ')

    
plt.xlabel("Time [s]")
plt.ylabel("w_z [deg/s]")
    
plt.legend()

plt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.05),
          ncol=3, fancybox=True, shadow=True)

plt.show
plt.savefig('plots.png', dpi=200)

N = np.size(ang_vel_z_window)
T = 1.0/100

#frequency domain 
yf = fft(ang_vel_z_window )
yff = fft(ang_vel_z_filt_lfilter )

xf = fftfreq(N,T)[0:N//2]


plt.plot(xf, np.abs(yf[0:N//2]),'b',label = 'FFT') #https://docs.scipy.org/doc/scipy/tutorial/fft.html
plt.plot(xf, np.abs(yff[0:N//2]),'r',label = 'FFT, post-filter') #https://docs.scipy.org/doc/scipy/tutorial/fft.html


plt.xlabel("frequency [Hz]",)
    
plt.legend()

plt.show
plt.xlim(0, 30)

plt.savefig('freqplot.png', dpi=200)

# compare various filtered gait speed of vincent using 
#data_array1 = np.genfromcsv('Mario_DefaultTrial_Session3_Shimmer_6835_Calibrated_SD.csv', delimiter=',', skip_header=2,dtype='float')
data_array1 = np.loadtxt('/content/drive/MyDrive/CAPSTONE/Mario_DefaultTrial_Session3_Shimmer_6835_Calibrated_SD.csv', skiprows=3) 
#print(data_array1[0,0])
N = np.size(data_array1[:,0])

t0 = np.full(N,data_array1[0,0])

unix_time = data_array1[:,0]
t = data_array1[:,0]-t0
t = t/1000 #milliseconds to seconds

ang_vel_z = data_array1[:,7]
lin_acc_x = data_array1[:,1]
lin_acc_y = data_array1[:,2]
norm_xy = np.sqrt(lin_acc_x**2+lin_acc_y**2)

delta_t = t[1]

fs_found = 1/(delta_t)
#print(fs_found)

b, a = signal.bessel(2, 8, fs=fs_found) #second order BW filter with 10% cutoff of sampling frequency 

#5km/h

n_i_5 = 665
n_f_5 = 921
#t_new_5 = t[n_i_5:n_f_5]
ang_vel_z_5 = ang_vel_z[n_i_5:n_f_5]
ang_vel_z_5_filt = signal.lfilter(b, a, ang_vel_z_5)
#6km/h
n_i_6 = 2099
n_f_6 = 2355
#t_new_6 = t[n_i_6:n_f_6]
ang_vel_z_6 = ang_vel_z[n_i_6:n_f_6]
ang_vel_z_6_filt = signal.lfilter(b, a, ang_vel_z_6)
#10km/h
n_i_10 = 3174
n_f_10 = 3430
#t_new = t[n_i_5:n_f_5]
ang_vel_z_10 = ang_vel_z[n_i_10:n_f_10]
ang_vel_z_10_filt = signal.lfilter(b, a, ang_vel_z_10)
#12km/h
n_i_12 = 4608
n_f_12 = 4864
#t_new = t[n_i_12:n_f_12]
ang_vel_z_12 = ang_vel_z[n_i_12:n_f_12]
ang_vel_z_12_filt = signal.lfilter(b, a, ang_vel_z_12)

#fig1 = plt.figure()

#fig, axs = plt.subplots(2)




#plt.plot(t_new, ang_vel_z_window,'b')

#plt.plot(t[0:256], ang_vel_z_5_filt,'g', label = '5km/h filtered')
#plt.plot(t[0:256], ang_vel_z_5,'g--', label = '5km/h filtered')

#plt.plot(t[0:256], ang_vel_z_6_filt, 'b',label = '6km/h filtered')
#plt.plot(t[0:256], ang_vel_z_6, 'b--',label = '6km/h filtered')

#plt.plot(t[0:256], ang_vel_z_10_filt, label = '10km/h filtered')
#plt.plot(t[0:256], ang_vel_z_10, '--',label = '10km/h filtered')

#plt.plot(t[0:256], ang_vel_z_12_filt,'r', label = '12km/h filtered')
#plt.plot(t[0:256], ang_vel_z_12,'r--', label = '12km/h filtered')

plt.plot(t, ang_vel_z, label = 'angular vel')
plt.plot(t, norm_xy*10, label = 'acceleration norm')

#selected_time_s = 90 #starting time
#add_time = 5 
#selected_time_e = selected_time_s + add_time #ending time
#print(selected_time_s/delta_t)
#print(selected_time_e/delta_t)
#plt.axvline(x = selected_time_s, color = 'b', label = 'axvline - full height') # 5
#plt.axvline(x = selected_time_e, color = 'r', label = 'axvline - full height') # 5

    
plt.xlabel("Time [s]")
plt.ylabel("w_z [deg/s]")
plt.xlim([50, 60]) # time limit for total time  
#plt.xlim([0, t[255]]) # time limit for total time  

plt.legend()

#plt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.05), ncol=3, fancybox=True, shadow=True)

plt.show
#plt.savefig('gaitspeeds.png', dpi=200)
plt.savefig('acceleration gait.png', dpi=200)

"""Text Detection code below"""

#text detection





"""# New Section"""